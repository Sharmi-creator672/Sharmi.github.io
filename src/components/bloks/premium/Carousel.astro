---
import { storyblokEditable, useStoryblokApi } from "@storyblok/astro";
import ImageCard from "@components/cards/ImageCard.astro";
import Picture from "@components/media/Picture.astro";
import { getIdFromContent } from "@lib/storyblokApi";
import type { ISbStories } from "@storyblok/astro";
import PostCard from "@components/cards/PostCard.astro";
import CarouselVue from "@components/helpers/CarouselVue.vue";

interface Props {
  blok: BlogAndWorkItemsStoryblok;
  lang: string;
  status: StoryStatus;
}

const { blok, lang, status } = Astro.props;
const api = useStoryblokApi();
const {
  content,
  container = "full",
  surface = "", 
  carousel_surface = "", 
  items,
  images,
  cards,
  type = "items", 
  padding_top = "pt-lg",
  padding_bottom = "pb-lg",
  autoplay = "none",
  loop = false,
  align_slides = "start",
  item_width_xs = 100,
  item_width_sm = 50,
  item_width_md = 33,
  item_width_lg = 25,
  item_width_xl = 20,
  gap_xs = 1,
  gap_sm = 1,
  gap_md = 1,
  gap_lg = 2,
  gap_xl = 2,
  overflow_hidden = false,
  drag_free = false,
  navigation = true,
  min_height = "0",
  aspect_ratio = 1,
  arrows_overlay = false,
  delay=4000,
  auto_scroll_speed=2,
  auto_scroll_direction="forward",

} = blok;

let slides: any[] = [];
if (type === "items" && items && items.length > 0) {
  const newsItems = (await api.get(`cdn/stories`, {
    version: status || "published",
    by_uuids_ordered: items.join(","),
    language: lang,
    per_page: 100,
    page: 1,
  })) as ISbStories;

  slides = newsItems.data.stories;
}
if (type === "images" && images && images.length > 0) {
  slides = images;
}

if (type === "cards" && cards && cards.length > 0) {
  slides = cards;
}

const id = getIdFromContent(content);
const gapSizes = `--gap-xs:${gap_xs}rem; --gap-sm:${gap_sm}rem; --gap-md:${gap_md}rem; --gap-lg:${gap_lg}rem; --gap-xl:${gap_xl}rem;`;
const slideSize = `--width-xs:${item_width_xs}%; --width-sm:${item_width_sm}%; --width-md:${item_width_md}%; --width-lg:${item_width_lg}%; --width-xl:${item_width_xl}%;`;
const gapCorrections = `--correction-xs:${(100 - item_width_xs) / 100}; --correction-sm:${(100 - item_width_sm) / 100}; --correction-md:${(100 - item_width_md) / 100}; --correction-lg:${(100 - item_width_lg) / 100}; --correction-xl:${(100 - item_width_xl) / 100};`;

const noRadius =
  gap_xs === "0" &&
  gap_sm === "0" &&
  gap_md === "0" &&
  gap_lg === "0" &&
  gap_xl === "0";

const breakpointsFull = [
  { minWidth: "1024px", size: `${Math.round(item_width_lg)}vw` }, // lg
  { minWidth: "768px", size: `${Math.round(item_width_md)}vw` }, // md
  { minWidth: "640px", size: `${Math.round(item_width_sm)}vw` }, // sm
  { minWidth: "0px", size: `${Math.round(item_width_xs)}vw` }, // xs
];
const breakpointsBreakout = [
  {
    minWidth: "1400px",
    size: `calc(1400px * ${item_width_xl} / 100)`,
  }, 
  { minWidth: "1024px", size: `${Math.round(item_width_lg)}vw` }, // lg
  { minWidth: "768px", size: `${Math.round(item_width_md)}vw` }, // md
  { minWidth: "640px", size: `${Math.round(item_width_sm)}vw` }, // sm
  { minWidth: "0px", size: `${Math.round(item_width_xs)}vw` }, // xs
];
const breakpoints = [
  {
    minWidth: "1000px",
    size: `1000px * ${item_width_xl} / 100)`,
  }, // --content-max-width
  { minWidth: "768px", size: `${Math.round(item_width_md)}vw` }, // md
  { minWidth: "640px", size: `${Math.round(item_width_sm)}vw` }, // sm
  { minWidth: "0px", size: `${Math.round(item_width_xs)}vw` }, // xs
];

function getMediaSizes() {
  let sizes: any = [];
  if (container === "full-width") {
    sizes = breakpointsFull.map(
      (bp) => `(min-width: ${bp.minWidth}) ${bp.size}`,
    );
  }
  if (container === "breakout") {
    sizes = breakpointsBreakout.map(
      (bp) => `(min-width: ${bp.minWidth}) ${bp.size}`,
    );
  }
  if (container === "normal") {
    sizes = breakpoints.map((bp) => `(min-width: ${bp.minWidth}) ${bp.size}`);
  }

  return sizes.join(", ");
}
---

<section
  class={`${surface} ${padding_top} ${padding_bottom} grid grid-cols-1 content-grid overflow-hidden content-end`}
  {...storyblokEditable(blok)}
  {id}
  style={`${slideSize} ${gapCorrections} ${gapSizes}`}
>
  <div
    class={`${container} ${overflow_hidden ? "crop" : ""} ${container !== "full-width" && noRadius && overflow_hidden ? "rounded" : ""}  `}
  >
    <CarouselVue
      client:visible
      bottom={true}
      autoplay={autoplay === "autoplay"}
      autoscroll={autoplay === "autoscroll"}
      dragFree={drag_free}
      loop={loop}
      align={align_slides}
      {navigation}
      className={carousel_surface}
      {arrows_overlay}
      {auto_scroll_direction}
      {auto_scroll_speed}
      {delay}
    >
      {
        type === "cards" &&
          slides.map((item: any, index: any) => (
            <slide>
              <div
                style={`min-height:${min_height}svh;`}
                class={
                  index === slides.length - 1 && loop
                    ? "last-slide h-full"
                    : "h-full"
                }
              >
                <ImageCard {...item} sizes={getMediaSizes()} {noRadius} />
              </div>
            </slide>
          ))
      }

      {
        type === "images" &&
          slides.map((thumbnail: any, index: any) => (
            <slide>
              <div
                class={`${index === slides.length - 1 && loop ? "last-slide" : ""} ${noRadius ? "" : "rounded-media overflow-hidden media-bg"}`}
              >
                <Picture
                  src={thumbnail.filename}
                  alt={thumbnail.alt || thumbnail.filename}
                  sizes={getMediaSizes()}
                  ar={aspect_ratio}
                  layout="fill"
                  loading="lazy"
                   
                />
              </div>
            </slide>
          ))
      }

      {
        type === "items" &&
          slides.map((story: any, index: any) => (
            <slide>
              <div
                class={index === slides.length - 1 && loop ? "last-slide" : ""}
              >
                <PostCard
                  {...story.content}
                  full_slug={story.full_slug} 
                  compact={true}
                  wide={true}
                  sizes={getMediaSizes()}
                  {noRadius}
                />
              </div>
            </slide>
          ))
      }
    </CarouselVue>
  </div>
</section>
