---
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import Layout from "@layouts/Layout.astro";
import { translateUrl } from "@lib/translate";
import { SITE_LANG } from "astro:env/client";
import { getEntry, getCollection } from "astro:content";
import { collectionToRoutes } from "@lib/storyblokApi";

export async function getStaticPaths() {
  try { 
    const pagesData = await getCollection("page");
    const postData = await getCollection("post");
    const workData = await getCollection("work");
    const serviceData = await getCollection("service");

    const routes = await collectionToRoutes([
      ...pagesData,
      ...postData,
      ...workData,
      ...serviceData,
    ]);
 
    return routes.flat();
  } catch (e) {
    console.error("Error:::", e);

    return [
      {
        params: {
          slug: undefined,
        },
        props: {
          lang: SITE_LANG,
          id: "404",
        },
      },
    ];
  }
}

const props = Astro.props;
const { lang, id, component } = props;

console.log("props >>>> ", props);

if (!id) return Astro.redirect("/404");

const status = import.meta.env.DEV ? "draft" : "published";
const settings = (await getEntry("settings", lang)).data;
const locales = (await getCollection("locales")).map((item) => item.id);

if (!settings) {
 return Astro.redirect("/setup");
} 
if (!component) return Astro.redirect("/404");

const story = (await getEntry(component, id)).data;

const { og_title, og_description, og_image } = story || {};

const localeUrls = translateUrl(Astro.url, locales || [SITE_LANG]);

/*  */

const meta = {
  title: og_title || "404",
  description: og_description || "page not found",
  og_image: "",
  image: og_image?.filename || "",
};
---

<Layout meta={meta} {settings} {localeUrls}> 
  {story && <StoryblokComponent blok={story as any} {...props} {status} />}
</Layout>
